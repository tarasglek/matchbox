---
systemd:
  units:
    - name: static-hostname.service
      enable: true
      contents: |
        [Unit]
        Description=set static dns to full dynamic dns
        Before=etcd-member.service kubelet.service
        After=network-online.target
        Wants=network-online.target systemd-resolved.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=/bin/sh -c "if [ ! -e /etc/hostname ]; then hostnamectl --static set-hostname `host \`hostnamectl --transient\`|sed 's/ .*//'`; systemctl daemon-reload; echo wrote /etc/hostname; fi"
        ExecStart=/bin/sh -c 'grep -v localhost /etc/hostname || (rm /etc/hostname; echo failed to set hostname && exit 1)'
        [Install]
        RequiredBy=etcd-member.service kubelet.service
    - name: iscsid.service
      enable: true
    - name: docker.service
      enable: true
    - name: locksmithd.service
      mask: true
    - name: fake-syslog.service
      enable: true
      contents: |
      [Unit]
      Description=syslog emulation
      After=systemd-journald.service
      Requires=systemd-journald.service

      [Service]
      ExecStart=/bin/sh -c "journalctl -f >> /var/log/syslog"
      TimeoutStartSec=0
      Restart=on-failure
      RestartSec=5s

      [Install]
      WantedBy=multi-user.target
    - name: kubelet.path
      enable: true
      contents: |
        [Unit]
        Description=Watch for kubeconfig
        [Path]
        PathExists=/etc/kubernetes/kubeconfig
        [Install]
        WantedBy=multi-user.target
    - name: wait-for-dns.service
      enable: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.service
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        [Service]
        EnvironmentFile=/etc/kubernetes/kubelet.env
        Environment="RKT_RUN_ARGS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --mount volume=resolv,target=/etc/resolv.conf \
          --volume var-lib-cni,kind=host,source=/var/lib/cni \
          --mount volume=var-lib-cni,target=/var/lib/cni \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log \
          --volume iscsiadm,kind=host,source=/usr/sbin/iscsiadm \
          --mount volume=iscsiadm,target=/usr/sbin/iscsiadm \
          --volume iscsietc,kind=host,source=/etc/iscsi \
          --mount volume=iscsietc,target=/etc/iscsi \
          --insecure-options=image" #insecure to facilitate pulling from source without signature
        ExecStartPre=/bin/sh -c 'echo H=%H;hostnamectl --static'
        ExecStartPre=/bin/sh -c 'if [ "%H" == "localhost" ] ;then echo systemd hostname fail; exit 1;fi'
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/inactive-manifests
        ExecStartPre=/bin/mkdir -p /var/lib/cni
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/volume-plugins
        ExecStartPre=/usr/bin/bash -c "grep 'certificate-authority-data' /etc/kubernetes/kubeconfig | awk '{print $2}' | base64 -d > /etc/kubernetes/ca.crt"
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --require-kubeconfig \
          --client-ca-file=/etc/kubernetes/ca.crt \
          --anonymous-auth=false \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=cni \
          --lock-file=/var/run/lock/kubelet.lock \
          --exit-on-lock-contention \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --allow-privileged \
          --hostname-override=%H \
          --node-labels=node-role.kubernetes.io/node \
          --cluster_dns={{.k8s_dns_service_ip}} \
          --cluster_domain=cluster.local \
          --volume-plugin-dir=/etc/kubernetes/volume-plugins --enable-controller-attach-detach=false
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=5
        [Install]
        Requires=iscsid.service
        WantedBy=multi-user.target
    - name: multipathd.service
      enable: true
      contents: |
        [Unit]
        Description=Multipath service
        Before=kubelet.service
        [Service]
        ExecStartPre=/sbin/modprobe dm-multipath
        ExecStart=/usr/sbin/multipathd -d -s
        [Install]
        RequiredBy=kubelet.service
storage:
  files:
    - path: /etc/kubernetes/kubelet.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          KUBELET_IMAGE=http://bootstrap.example.com/assets/rkt/hyperkube.aci
          KUBELET_IMAGE_TAG=
    - path: /etc/ssl/etcd/.empty
      filesystem: root
      mode: 0644
      contents:
        inline: |
          empty
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      contents:
        inline: |
          fs.inotify.max_user_watches=16184

passwd:
#{{ if index . "ssh_authorized_keys" }}
  users:
    - name: core
      ssh_authorized_keys:
#        {{ range $element := .ssh_authorized_keys }}
        - "{{$element}}"
#        {{end}}
#{{end}}
